{\rtf1\ansi\ansicpg1252\cocoartf1138\cocoasubrtf470
{\fonttbl\f0\fswiss\fcharset0 ArialMT;\f1\fmodern\fcharset0 Courier;\f2\fswiss\fcharset0 Helvetica;
}
{\colortbl;\red255\green255\blue255;\red255\green255\blue255;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720

\f0\fs32 \cf0 \cb2 In this assignment, you will submit two programs related to lighting in computer graphics.\
\pard\pardeftab720\sa320

\b \cf0 Part 1: OpenGL Lighting Features
\b0 \
In this part, you will develop a program to light a sphere using OpenGL\'92s lighting features. You will define 3 light sources, originating from the top left corner, top right corner, and directly behind the viewer. Each light source should shed a white, red, blue, or green light as selected by the user. At least two different surface materials of the sphere should be available for selection. Options for choosing lighting elements should also be available. You will implement a menu system, which will be activated by clicking the right button of the mouse. Use the 
\f1 glutSolidSphere
\f0  command to generate the sphere.\
The final system, with a white light shining from top-right corner, a red light shining from top left, and another white light shining from behind the viewer should look like this:\
\pard\pardeftab720\qc

\f2\fs24 \cf0 \pard\pardeftab720\qc

\f0\fs32 \cf0 \
\pard\pardeftab720\sa320
\cf0 The menu hierarchy should resemble the following.\
\pard\pardeftab720\qc

\f2\fs24 \cf0 
\f0\fs32 \
\pard\pardeftab720\sa320
\cf0 You may create your own light sources, or use the following colour mixes.\
\pard\pardeftab720

\f1\fs24 \cf0  GLfloat white_light[] = \{ 1.0, 1.0, 1.0, 1.0 \};\
 GLfloat green_light[] = \{ 0.2, 1.0, 0.2, 1.0 \};\
 GLfloat red_light[] = \{ 1.0, 0.4, 0.4, 1.0 \};\
 GLfloat blue_light[] = \{ 0.2, 0.2, 1.0, 1.0 \};\
\pard\pardeftab720\sa320

\f0\fs32 \cf0 You may use any of the following properties, or any other properties you are interested in.\
\pard\pardeftab720

\f1\fs24 \cf0  // gold\
 GLfloat gold_ambient[] = \{ 0.24725, 0.1995, 0.0745, 1.0 \};\
 GLfloat gold_diffuse[] = \{ 0.75164, 0.60648, 0.22658, 1.0 \};\
 GLfloat gold_specular[] = \{ 0.628281, 0.555802, 0.366065, 1.0 \};\
 GLfloat gold_shininess[] = \{ 51.2 \};\
 // silver\
 GLfloat silver_ambient[] = \{ 0.19225, 0. 19225, 0. 19225, 1.0 \};\
 GLfloat silver_diffuse[] = \{ 0.50754, 0. 50754, 0. 50754, 1.0 \};\
 GLfloat silver_specular[] = \{ 0.508273, 0.508273, 0.508273, 1.0 \};\
 GLfloat silver_shininess[] = \{ 51.2 \};\
 // copper\
 GLfloat copper_ambient[] = \{ 0.2295, 0.08825, 0.0275, 1.0 \};\
 GLfloat copper_diffuse[] = \{ 0.5508, 0.2118, 0.066, 1.0 \};\
 GLfloat copper_specular[] = \{ 0.580594, 0.223257, 0.0695701, 1.0 \};\
 GLfloat copper_shininess[] = \{ 51.2 \};\
\pard\pardeftab720\sa320

\f0\b\fs32 \cf0 Part 2: Implementing "Pre-lit" scenes
\b0 \
In this part you will develop a program to light a cylinder without using OpenGL's three-term lighting model. This is done by pre-calculating the light intensity for every vertex in the scene. The goal is to deepen your understanding of both the three-term lighting model and OpenGL's implementation.\
Your program should render a cylinder as follows:\
\pard\tx220\tx720\pardeftab720\li720\fi-720
\ls1\ilvl0\cf0 {\listtext	\'95	}Assume the cylinder is standing on the 
\i X,Z
\i0  plane, and uses the Y-axis as its own axis. You can imagine the cylinder as a stack of circles. \
{\listtext	\'95	}In steps of 10, find the cosine of each angle from 0 to 360. \
{\listtext	\'95	}Use the fact that the cosine of the angle between two (normalized) vectors is the dot product of the vectors to figure out the location of the vector. You can then stack the circles along the 
\i Y
\i0  axis. Implement at least 100 cirlces. \
{\listtext	\'95	}Use three light sources: the top-left corner, top-right corner, and directly behind the viewer.\
\pard\pardeftab720\sa320
\cf0 The following discussion will give you a brief walkthrough of the exercise.\
You will need to define a surface normal for each vertex. For a cylinder, this is an easy calculation, and is part of the exercise. Your code should explain how this calculation is done.\
Next, you must compute a colour for each vertex. This is the simple sum of the light sources. Define your object so that it does not have to be rotated or translated into place. (This is to keep your computation simpler). Remember, the lighting will not change once it is moved.\
For each light, you must obtain its position; its ambient, diffuse, and specular values; the attenuation constants; etc. These values are available to the programmer via 
\i glGetLight()
\i0  as follows:\
\pard\pardeftab720

\f1\fs24 \cf0  float pos[4];\
 glGetLightfv( GL_LIGHT0, GL_POSITION, pos );\
 float att[1];\
 glGetLightfv( GL_LIGHT3, GL_LINEAR_ATTENUATION, att );\
\pard\pardeftab720\sa320

\f0\fs32 \cf0 Remember that the position of the viewer is always (0,0,0).\
The code that draws a scene using OpenGL lighting should contain the following commands.\
\pard\pardeftab720

\f1\fs24 \cf0  glShading( GL_SMOOTH );\
 glEnable( GL_LIGHTING );\
 ...// define lights, etc.\
 glColor3i( 255, 0, 0 );\
 glBegin( GL_POLYGON );\
 glNormal3f( .... );\
 glVertex3f( .... );\
 ...\
 glEnd();\
\pard\pardeftab720

\f0\fs32 \cf0 The code that draws your scene without OpenGL's lighting calculation should resemble the following.\
\pard\pardeftab720

\f1\fs24 \cf0  glDisable( GL_LIGHTING );\
 glEnable( GL_SMOOTH );\
\
 glBegin( GL_POLYGON );\
 glColor3f( ... ); // Your lighting values\
 glVertex3f( ... );\
 ...\
 glEnd();\
}